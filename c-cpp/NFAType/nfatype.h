// Class automatically generated by Dev-C++ New Class wizard

#ifndef NFATYPE_H
#define NFATYPE_H

#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <string>
#include "settype.h"

using namespace std;

// A class to implement a finite state automata
class NFAType
{
	public:
		// IN: SetType*, a pointer to a set of all states. Must all be single
		//                characters.
		//     SetType*, a pointer to a set of the possible input symbols - again,
		//                single characters only.
		//     char[], a pointer to a string representing the transition relation
    //              delta. It must be formatted: 
    //              <state>-<input>,<transition>[,<input>,<trans>...];
    //              where transition is the state to which the machine should
    //              proceed when it reads <input>.
    //     char, a character representing the start state. must be a member of
    //            the first SetType
    //     char[], a pointer to a string containing the accept states. must be
    //                members of the first SetType
		NFAType(SetType*, SetType*, const char[], char, SetType*);
    
    // OUT: writes the private members of the class to the standard output
    //      followed by an endline
    void write();

    // OUT: returns true if the NFA is valid as entered
    bool is_valid();
    
    //  IN: char, the current state
    //      string, the input string
    // OUT: returns a string 
    //      "<next_state>:<input_string|input_string - first letter>"
    string nextState(char, string);
    
    //	IN: string, an input string. you may use 'e' to represent an
    //      empty string (epsilon).
    // OUT: returns true if the string will be accepted by the machine, false
    //      otherwise.
    bool is_accepted(string);
    
		// class destructor
		~NFAType();

  private:
    // representation of the states of the NFA
    SetType* Q;
    
    // representation of the language of the NFA
    SetType* sigma;
    
    // representation of the transition function of the NFA
    const char* delta;
    
    // representation of the start state of the NFA
    char S;
    
    // representation of the accept state(s) of the NFA
    SetType* F;
    
    // representation of the current number of transitions
    int NumTransitions;
    
    // true if the NFA is currently valid
    bool valid;
};

#endif // NFATYPE_H


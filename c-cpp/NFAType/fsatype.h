// Class automatically generated by Dev-C++ New Class wizard

#ifndef FSATYPE_H
#define FSATYPE_H

#include <stdlib.h>
#include <string.h>
#include <iostream>
#include "settype.h"

// A class to implement a finite state automata
class FSAType
{
	public:
		// IN: SetType*, a pointer to a set of all states. Must all be single
		//                characters.
		//     SetType*, a pointer to a set of the possible input symbols - again,
		//                single characters only.
		//     char[], a pointer to a string representing the transition function
    //              delta. It must be formatted: 
    //              <state>-<input>,<transition>[,<input>,<trans>...];
    //              where transition is the state to which the machine should
    //              proceed when it reads <input>. There must be a definition
    //              for all states.
    //     char, a character representing the start state. must be a member of
    //            the first SetType
    //     char[], a pointer to a string containing the accept states. must be
    //                members of the first SetType
		FSAType(SetType*, SetType*, const char[], char, SetType*);
    
    // OUT: writes the private members of the class to the standard output
    //      followed by an endline
    void write();

    // OUT: returns true if the FSA is valid as entered
    bool is_valid();
    
    //	IN: char, a character which represents the current state
    //      char, the input symbol to test.
    // OUT: returns a character representing the next state the FSA will enter
    char nextState(char, char);
    
    //	IN: const char[], an input string. you may use 'e' to represent an
    //      empty string (epsilon).
    // OUT: returns true if the string will be accepted by the machine, false
    //      otherwise.
    bool is_accepted(const char[]);
    
		// class destructor
		~FSAType();

  private:
    // representation of the states of the FSA
    SetType* K;
    
    // representation of the language of the FSA
    SetType* sigma;
    
    // representation of the transition function of the FSA
    const char* delta;
    
    // representation of the start state of the FSA
    char S;
    
    // representation of the accept state(s) of the FSA
    SetType* F;
    
    // representation of the current number of transitions
    int NumTransitions;
    
    // true if the FSA is currently valid
    bool valid;
};

#endif // FSATYPE_H


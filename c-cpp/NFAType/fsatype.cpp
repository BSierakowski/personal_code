// Class automatically generated by Dev-C++ New Class wizard

#include "fsatype.h" // class's header file

// class constructor
FSAType::FSAType(SetType* Kinit, SetType* sigmainit, const char* deltainit, 
              char Sinit, SetType* Finit)
{
	K = Kinit;
	sigma = sigmainit;
	delta = deltainit;
	S = Sinit;
	F = Finit;
	NumTransitions = 0;
	valid = true;
	
 	if(K->is_empty()) {
    valid = false;
  }
  if(!K->is_member(S)) {
    valid = false;
  }
  if(F->is_empty()) {
    valid = false;
  }
  if(!K->is_subset(F)) {
    valid = false;
  }
}

void FSAType::write()
{
  cout << "The FSA ";
  valid ? cout << "is valid\n" : cout << "is not valid\n";
  cout << "States: ";
  K->write();
  cout << "Alphabet: ";
  sigma->write();
  cout << "Transition Function: " << delta << "\nStart State: " << S;
  cout << "\nEnd State(s): ";
  F->write();
  cout << endl;
}

bool FSAType::is_valid()
{
  if(valid) {
    return true;
  }
  return false;
}

bool FSAType::is_accepted(const char testString[])
{
  bool is_epsilon;
  
  if(!valid) {
    return false;
  }
  char curState = S;
  for(int i = 0; i < strlen(testString); i++) {
    if(!sigma->is_member(testString[i]) && testString[i] != 'e') {
      return false;
    }
    if(testString[i] != 'e') {
      curState = nextState(curState, testString[i]);
    }
  }
  if(F->is_member(curState)) {
    return true;
  }
  return false;
}

char FSAType::nextState(char state, char symbol)
{
  if(!K->is_member(state) || !sigma->is_member(symbol)) {
    return ' ';
  }
  
  //state1 equals the first state of the transition function
  char* state1 = (char*)delta;
  
  // keep checking states until state1[0] is the correct state
  while (state1[0] != state) {
    state1 = strchr(state1,';');
    state1++;
  }
  
  // now find the symbol. the assumption here is that the state string
  // is syntactically correct.
  state1++;
  state1 = strchr(state1,symbol);
  
  // and now we go 1 after the comma
  // because it's <symbol>,<state>
  state1 = strchr(state1,',');
  state1++;
  
  // and update the number of transitions
  NumTransitions++;
  
  return state1[0];
}

// class destructor
FSAType::~FSAType()
{
	
}


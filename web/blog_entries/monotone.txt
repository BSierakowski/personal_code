Image Programming in JavaScript: Converting to Monochrome
#time 03-03-09 01:14
#keywords image, javascript, programming

<p>In <a href="the_histogram.html">part 1</a> of this series, we looked at how
each pixel of an image is composed of three parts; red, green and blue, and
showed how to make histograms to give a summary of each. Towards the end, we
mentioned that they can be averaged in different ways to create a single
histogram; in this article we're going to look at that in more depth here and
show how it applies.

<h2>But First! Some Terminology</h2>

<p>In the last article, I danced around defining this word because I didn't
want to overwhelm you. We talked about how each pixel is composed of a red,
a green, and a blue component, and how each of those has a value between 0 and
255.

<p>What I didn't tell you then was that it's often useful to consider just the
red components of pixels in an image, just the green components, or just the
blue components.

<p><blockquote>A <em>channel</em> of an image I<sub>1</sub> is an image
I<sub>2</sub> composed entirely of one component of I<sub>1</sub></blockquote>

<p>So when we talk about the <em>red channel</em> of an image, we're talking
about the image that results from simply zeroing out the green and blue
components of each of its pixels. It's best to see it in action:

<p><img src="static/images/jump_r_g_b.jpg">

<p>The first image above can be entirely reconstructed from the last three 
monochrome images, using the first for the red channel, the second for the 
green channel, and the third for the blue. To see what I mean by this, let's 
step back and examine monochrome images a bit.

<h2>Monochrome in Black and White</h2>

<p>Conceptually, we can consider each pixel of a monochrome image to consist of 
just one byte of information, instead of three bytes for red, green and blue as 
in a color image. This byte represents the brightness of a pixel, where 0 is 
black (no brightness) and 255 is white (no brightness). The values in between 
represent the grays, from the dark low numbers to the light high colors.

<p>Since we know now that a digital image can be composed of values other than 
(r, g, b), let's update our working definition of a digital image:

<p><blockquote>A <em>Digital Image</em> is a sequence of pixels, each of which 
is composed of one or more <em>channels</em>. The value of each channel 
represents the strength of that channel in that pixel.</blockquote>

<p>So a monochrome image consists of only one channel, that representing the 
brightness of each pixel.

<h2>The Real World Intrudes</h2>

<p>We've got a nice new mental model of a monochrome image, but the real world, 
as it tends to do, will complicate matters. We're working with color images on 
the javascript canvas, which means that each pixel needs to be composed of red, 
green, and blue. In order to display a monochrome image on a javascript canvas, 
we'll need to convert each pixel from one channel, brightness to three.

<p>A convenient property of RGB images makes this transformation easy: any 
pixel made up of equal parts red, green, and blue will be gray. Therefore, to 
convert an image from monochrome to RGB, we simply use the brightness channel 
of each pixel in the monochrome image as all three channels in the RGB image.

<h2>Show Me The Goods</h2>

<p>Perhaps the best way to understand the concept of channels is to see how I
generated the image above. I've put up a <a
href="/static/pixastic_demos/mono_demo.html">demo</a> where you can see these
images generated with javascript; here's the important bits of the code, with
the fiddly bits stripped out:

<p><code lang="javascript">
function desaturate(rweight, gweight, bweight) {
  //normalize the color weights
  var scale = 1 / (rweight + gweight + bweight);
  rweight *= scale;
  gweight *= scale;
  bweight *= scale;

  each_pixel(image_data, function(r, g, b) {
    var brightness = r * rweight + g * gweight + b * bweight;

    //replace the r, g, and b values of the pixel with "brightness"
    return [brightness, brightness, brightness];
  });
}

//red channel only:
desaturate(1, 0, 0);

//green channel only:
desaturate(0, 1, 0);

//blue channel only:
desaturate(0, 0, 1);</code>

<p>First we convert the color weights into percentages, then we multiply
each component of each pixel times its weight to arrive at a new value for the
pixel to take. Since any pixel with the same value for each color channel will 
be gray, white, or black, the result is the three monochrome images we see
above.


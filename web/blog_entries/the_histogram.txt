Image Programming in Javascript: The Histogram
<p>Recently, I've spent a lot of my time <a 
href="http://flickr.com/photos/llimllib">taking photographs</a>. When I get 
home from taking pictures, I immediately pop open Lightroom to import the 
images, pick out my favorites, do some adjustments on them, and publish them.

<p>As a programmer, though, it was bothering me that I don't know 
<em>exactly</em> what's happening behind the scenes when I adjusted my images.  
What's <em>really</em> happening when I adjust the "saturation" slider for a 
photo?  How does sharpening work, and what does its "amount" mean?

<p>Sure, I could go read books to find out, but there's only way to really know 
what's happening: write a program to do it. This article represents part 1 of 
what will hopefully become a series on programming the digital image with 
javascript.

<h2>Wait, Javascript?</h2>

<p>Sure thing! With the recent adoption of the &lt;canvas&gt; element into 
modern browsers, javascript has gained the ability to load, display, and 
manipulate images at the pixel level. In addition, Jacob Seidelin recently 
created the <a href="http://www.pixastic.com/">Pixastic</a> library to do the 
heavy DOM and canvas lifting for us.

<p>As much as possible, I'll be using Pixastic as a base because javascript is 
a reasonably enjoyable programming language, the framework is new and simple, 
and I can show neat demos right in the browser. I'll also be using jQuery, 
because it makes writing cross-browser javascript much more pleasant.

<h2>Jumping Right In: What Is a Digital Image?</h2>

<p>In the spirit of <acronym title="You Ain't Gonna Need It">YAGNI</acronym>, 
we're going to accept a superficial answer to this question, at least for now.  
We're basically going to pretend that all images are in color and represented 
in the same colorspace in the same way. Our provisional definition of a digital 
image is this:

<p><blockquote>A <em>Digital Image</em> is a sequence of pixels, each of which 
is represented by a 3-byte tuple (red, green, blue). The value of each element 
represents the strength of that color in that pixel.</blockquote>

<p>This means that each pixel has a value between 0 and 255, where 0 represents 
absence and 255 full strength. For example, the tuple (255, 0, 0) would 
represent a pure red pixel, the tuple (0, 255, 0) a pure green one, and (0, 0, 
255) a pure blue one.

<div style="float:right"><img src="/static/images/AdditiveColor.png"></div>

<p>Since we're mixing light<sup><a href="#foot1">1</a></sup>, the colors are <a 
href="http://en.wikipedia.org/wiki/Additive_color">additive</a>, which means 
that they get lighter when mixed. Thus (255, 255, 0) represents a mixiture of 
red and green which produces yellow, (0, 255, 255) represents green and blue 
combined to form magenta, and so on as you can see in the chart to the right.

<p>You can think of it is as if you're in a dark room shining colored 
flashlights on a wall; if you don't shine any lights the wall remains black. If 
you shine all three colors on it, you get white. Thus, it makes sense that (0, 
0, 0) represents black and (255, 255, 255) represents white.

<h2>OK, I get it. So what's a Histogram?</h2>

<div style="float:right"><img src="/static/images/hist.png"></div>

<p>There are of course lots of colors in between the pure ones I talked about 
above, represented by the all the possible color tuples with values between 0 
and 255. The <em>histogram</em> of an image is simply a chart showing the 
frequency of each value from 0 to 255. Here is an image with three histograms, 
one for each of the colors in a pixel.

<p><img src="/static/images/jump_hist.png">

<p>We can see that there are a lot of light blues, presumably in the the sky, a 
lot of midrange reds and greens, and not a whole lot of dark colors, though 
there is a spike at pure black. I won't go over what a histogram means for your 
photography; you should read what <a 
href="http://www.luminous-landscape.com/tutorials/understanding-series/understanding-histograms.shtml">photography 
experts</a> have to say about that.

<h2>On To The Source</h2>

<p>There are 2 major steps in creating histograms: gathering the data and 
drawing the histogram. To gather the data, we'll initialize three arrays with 
255 slots, one array slot for each of the color values. Then we'll just loop 
through each pixel in the image and add one in the appropriate histogram slot 
for each color. That's it!

<p><code lang="javascript">function array256(default_value) {
  arr = [];
  for (var i=0; i<256; i++) { arr[i] = default_value; }
  return arr;
}

var rvals = array256(0);
var gvals = array256(0);
var bvals = array256(0);

each_pixel(image_data, function(r, g, b) {
  rvals[r]++;
  gvals[g]++;
  bvals[b]++;
});</code>

<p>Where <code>each_pixel</code> is simply a function that loops through the 
image and passes the red, green, and blue value of each pixel of its first 
argument to the function passed as its second argument. What we have at the end 
of this code is three arrays, each containing the count of each possible value 
of one color in the image.

<p>To simplify the display of these histograms, we'll draw on a &lt;canvas&gt; 
255 pixels wide, so that each possible color occupies one pixel. Since our 
canvas is only 100 pixels tall, and any histogram value could be greater than 
100, we'll scale each value as the percentage of the maximum value in the 
histogram.

<p><code lang="javascript">//get a reference to the canvas to draw on
var ctx = $("#colorhistcanvas")[0].getContext("2d");
var rmax = Math.max.apply(null, rvals);
var bmax = Math.max.apply(null, bvals);
var gmax = Math.max.apply(null, gvals);

function colorbars(max, vals, color, y) {
  ctx.fillStyle = color;
  jQuery.each(vals, function(i,x) {
    var pct = (vals[i] / max) * 100;
    ctx.fillRect(i, y, 1, -Math.round(pct));
  });
}

colorbars(rmax, rvals, "rgb(255,0,0)", 100);
colorbars(gmax, gvals, "rgb(0,255,0)", 200);
colorbars(bmax, bvals, "rgb(0,0,255)", 300);</code>

<p><a name="foot1"><sup>1</sup>: As opposed to pigment, which is governed by <a 
href="http://en.wikipedia.org/wiki/Subtractive_color">subtractive color</a></a>
